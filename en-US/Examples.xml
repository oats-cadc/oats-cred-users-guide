<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "oats_cred_users_guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-client_usage_examples">
	<title>Java command line client usage examples</title>

<para>
The usage of the java command line client requires the user authentication through
user proxy. The user proxy can be obtained in three ways, given a X509 user certificate
released by a trusted Certification Authority for authentication: mycert.crt, mykey.key
</para>

<orderedlist>

<listitem>
<para>
The concatenetion of key plus cert (pay attention: the order matter) can be used as user proxy:
</para>
<screen>
cat mykey.key mycert.crt >> userproxy.pem
</screen>
</listitem>

<listitem>
<para>
The user proxy can be created using a script provided in the core module:
</para>
<screen>
core/cadc-util/scripts/createProxyCert /path/mykey_and_cert.pem &lt;days of validity number&gt; cadcproxy
</screen>
<para>
Where
</para>
<screen>
cat mykey.key mycert.pem &gt; mykey_and_cert.pem
</screen>
<para>
Certificate and key must not contain bag attributes and key must 
be no password protected. If needed, the password can be removed doing:
</para>
<screen>
openssl rsa -in mykey.pem -out mykey.pem.new
Enter pass phrase for mykey.pem: ****************
writing RSA key
$&gt;mv mykey.pem.new mykey.pem
</screen>
</listitem>

<listitem>
<para>
A VOMS proxy can be used. To create it:
Create two files:
</para>
<screen>
$HOME/.globus/usercert.pem (certificate)
$HOME/.globus/userkey.pem (private key)
</screen>
<para>
Permissions on the pem files must be:
</para>
<screen>
644 for $HOME/.globus/usercert.pem
400 for $HOME/.globus/userkey.pem
</screen>
<para>
use the VOMS client ant your Virtual Organization:
</para>
<screen>
voms-proxy-init --voms voname
</screen>
</listitem>
</orderedlist>

<section id="sect-delegate">
		<title>Delegate operation</title>
		<para>
			The delegate operation delegates the x509 credentials.
		</para>
<screen>
java ca.nrc.cadc.cred.client.Main
                                  --delegate 
                                  --daysValid=1  
                                  --resourceID=ivo://&lt;authority&gt;/cred
                                  --cert=$X509_USER_PROXY
</screen>

</section>
	
<section id="sect-view">
		<title>View operation</title>
		<para>
			The view  operation allows to view the currently delegated x509 certificate.
		</para>

<screen>
java ca.nrc.cadc.cred.client.Main 
                                 --get 
                                 --userid=&lt;a_user_id&gt; 
                                 --resourceID=ivo://&lt;authority&gt;/cred 
                                 --cert=$X509_USER_PROXY
</screen>

</section>
	
<section id="sect-get">
		<title>Get operation</title>
		<para>
			The get operation creates a new proxy certificate 
based on the one that has been delegated.
		</para>

<screen>
java ca.nrc.cadc.cred.client.Main
                                 --view 
                                 --resourceID=ivo://&lt;authority&gt;cred
                                 --cert=$X509_USER_PROXY
</screen>

</section>
	

</chapter>


